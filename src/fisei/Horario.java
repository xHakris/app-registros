/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fisei;

import bd.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author User
 */
public class Horario extends javax.swing.JFrame {
    
    DefaultTableModel modelo = new DefaultTableModel();
    String[] idsHorarios, horasEntrada, horasSalida;
    DefaultComboBoxModel horarioModel = new DefaultComboBoxModel();
    DefaultComboBoxModel carrerasModel = new DefaultComboBoxModel();
    String doc;
    Integer fila, idActual;
    Conexion cc = new Conexion();
    Connection cn = cc.conectar();
    TableColumnModel columnModel;
    
    public Horario() {
        initComponents();
        seleccionarMateria();
        cargarTablaHorarios();
        this.setLocationRelativeTo(null);
        cerrarEdicion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        hEntrada = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        hSalida = new javax.swing.JComboBox<>();
        jbtn_Nuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        horarios = new javax.swing.JTable();
        jbtn_editar = new javax.swing.JButton();
        jbtn_Eliminar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        dia = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Hora entrada");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 98, -1, -1));

        hEntrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22" }));
        getContentPane().add(hEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 123, 201, -1));

        jLabel3.setText("Hora Salida");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 161, -1, -1));

        hSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22" }));
        getContentPane().add(hSalida, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 186, 201, -1));

        jbtn_Nuevo.setText("Agregar nuevo");
        jbtn_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_NuevoActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_Nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 220, 40));

        horarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(horarios);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 11, 870, -1));

        jbtn_editar.setText("Actualizar");
        jbtn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_editarActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_editar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 100, 30));

        jbtn_Eliminar.setText("Borrar");
        jbtn_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_EliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, 100, 30));

        jButton4.setText("Volver");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, 100, 30));

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 100, 30));

        dia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LUNES", "MARTES", "MIÉRCOLES", "JUEVES", "VIERNES", "SÁBADO", "DOMINGO" }));
        getContentPane().add(dia, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Pantalla_gestion pg = new Pantalla_gestion();
        pg.show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jbtn_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_NuevoActionPerformed
        
            agregarMateria();
        
    }//GEN-LAST:event_jbtn_NuevoActionPerformed

    private void jbtn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_editarActionPerformed
        editarMateria();
    }//GEN-LAST:event_jbtn_editarActionPerformed

    private void jbtn_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_EliminarActionPerformed
        borrarMateria();
    }//GEN-LAST:event_jbtn_EliminarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        cerrarEdicion();
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Horario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> dia;
    private javax.swing.JComboBox<String> hEntrada;
    private javax.swing.JComboBox<String> hSalida;
    private javax.swing.JTable horarios;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtn_Eliminar;
    private javax.swing.JButton jbtn_Nuevo;
    private javax.swing.JButton jbtn_editar;
    // End of variables declaration//GEN-END:variables



    
    public void cargarTablaHorarios() {
        try {
            int i = 0;
            String[] titulos = {"#", "Hora de entrada", "Hora de salida", "Dia"};
            String[] horariosList = new String[4];
            modelo = new DefaultTableModel(null, titulos);
            String sql = "select * from horarios";
            Statement psd = cn.createStatement();
            ResultSet rs = psd.executeQuery(sql);
            while (rs.next()) { //Contamos cuantos datos hay
                i++;
            }
            horasEntrada = new String[i]; //Creamos los array con la cantidad de datos que haya
            horasSalida = new String[i];
            i=0;
            rs = psd.executeQuery(sql); //ejecutamos de nuevo la consulta
            while (rs.next()) {
                horariosList[0] = rs.getString("id");
                horariosList[1] = rs.getString("horaEntrada");
                horasEntrada[i] = rs.getString("horaEntrada");
                horariosList[2] = rs.getString("horaSalida"); //Enviamos el ID y nos devuelve el nombre
                horasSalida[i] = rs.getString("horaSalida");
                horariosList[3] = rs.getString("dia"); //Lo mismo de arriba
                modelo.addRow(horariosList);
                i++;
            }
            horarios.setModel(modelo);
            columnModel = horarios.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(1);//Ajustamos el tamaño de la columna 0
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void agregarMateria() {
        try {
            String sql = "insert into horarios values(?,?,?,?)";
            PreparedStatement psd = cn.prepareStatement(sql);
            psd.setString(1, null);
            psd.setInt(2, Integer.valueOf(hEntrada.getSelectedItem().toString()));
            psd.setInt(3, Integer.valueOf(hSalida.getSelectedItem().toString()));
            psd.setString(4, dia.getSelectedItem().toString());
            int r = psd.executeUpdate();
            if (r > 0) {
                JOptionPane.showMessageDialog(null, "El horario se ha agregado correctamente");
                cargarTablaHorarios();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void editarMateria() {
        try {
                String sql = "Update horarios set horaEntrada='" + hEntrada.getSelectedItem() + "', horaSalida='" + hSalida.getSelectedItem() + "', dia='" + dia.getSelectedItem()+ "' WHERE id='" + idActual + "'";
                PreparedStatement psd = cn.prepareStatement(sql);

                int n = psd.executeUpdate();

                if (n > 0) {
                    JOptionPane.showMessageDialog(null, "Actualizo Correctamente");
                    cargarTablaHorarios();
                    cerrarEdicion();
                }
            } catch (SQLException ex) {
                System.out.println("ERROR: " + ex);
            }
        }

    private void cerrarEdicion() {
        
        jbtn_editar.setEnabled(false);
        jbtn_Eliminar.setEnabled(false);
        cancelar.setEnabled(false);
        jbtn_Nuevo.setEnabled(true);
    
    }

    private void borrarMateria() {
        if (JOptionPane.showConfirmDialog(new JInternalFrame(),
                "Estas seguro de borrar el registro",
                "Borrar registros", JOptionPane.WARNING_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try {
                String sql = "DELETE  FROM horarios WHERE id = '" + idActual + "'";

                PreparedStatement psd = cn.prepareStatement(sql);

                int n = psd.executeUpdate();

                if (n > 0) {
                    JOptionPane.showMessageDialog(null, "Se elimino correctamente");
                    cargarTablaHorarios();
                    cerrarEdicion();
                }

            } catch (SQLException ex) {
                System.out.println("ERROR" + ex);
            }
        }
    }
    

    private void seleccionarMateria() {
        horarios.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                activarBotonesEdicion();
                if (horarios.getSelectedRow() != -1) {
                    jbtn_Nuevo.setEnabled(false);
                    fila = horarios.getSelectedRow();
                    hEntrada.setSelectedIndex(devolverIndex(horarios.getValueAt(fila, 1).toString()));
                    hSalida.setSelectedIndex(devolverIndex(horarios.getValueAt(fila, 2).toString()));
                    dia.setSelectedIndex(devolverIndexDia(horarios.getValueAt(fila, 3).toString()));
                    idActual = Integer.valueOf(horarios.getValueAt(fila, 0).toString()); //Guardamos el ID para actualizar o eliminar posteriormente
                }
            }

            
        });
    }
    
    private int devolverIndex(String nombre) {
        for (int i = 0; i < 14; i++) {
            if (hEntrada.getItemAt(i).equals(nombre)) {
            return i;
            }
        }
        return 0;
    }
    
    private int devolverIndexDia(String dia) {
        
            switch (dia){
                case "LUNES":
                    return 0;
                case "MARTES":
                    return 1;
                case "MIÉRCOLES":
                    return 2;
                case "JUEVES":
                    return 3;
                case "VIERNES":
                    return 4;
                case "SÁBADO":
                    return 5;
                case "DOMINGO":
                    return 6;
                default:
                    return 0;
            
        }
    }
    
    private void activarBotonesEdicion() {
        jbtn_editar.setEnabled(true);
        jbtn_Eliminar.setEnabled(true);
        cancelar.setEnabled(true);
    }

    private int devolverIdDocente(String nombre) {
        for (int i = 0; i < horasEntrada.length; i++) {
            if (horasEntrada[i].equals(nombre)) {
            return Integer.valueOf(idsHorarios[i]);
            }
        }
        return 0;
    }
}
