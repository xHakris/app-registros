/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fisei;

import bd.Cliente;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author User
 */
public class Horario extends javax.swing.JFrame {

    Conexion cn = new Conexion();
    Connection cc = cn.conectar();
    DefaultTableModel modelo = new DefaultTableModel();
    String[] idsHorarios, horasEntrada, horasSalida;
    DefaultComboBoxModel horarioModel = new DefaultComboBoxModel();
    DefaultComboBoxModel carrerasModel = new DefaultComboBoxModel();
    String doc;
    Integer fila, idActual;
    TableColumnModel columnModel;

    Cliente cliente = new Cliente();
    MediaType JSON = MediaType.parse("application/json; charset=utf-8");

    String[] titulos = {"#", "Hora de entrada", "Hora de salida", "Dia"};

    public Horario() {
        initComponents();
        seleccionarMateria();
        cargarTablaHorarios();
        this.setLocationRelativeTo(null);
        cerrarEdicion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel2 = new javax.swing.JLabel();
        horaEntrada = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        horaSalida = new javax.swing.JComboBox<>();
        jbtn_Nuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        horarios = new javax.swing.JTable();
        jbtn_editar = new javax.swing.JButton();
        jbtn_Eliminar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        dia = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel2.setText("Hora entrada");

        horaEntrada.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        horaEntrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22" }));

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel3.setText("Hora Salida");

        horaSalida.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        horaSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22" }));

        jbtn_Nuevo.setBackground(new java.awt.Color(204, 255, 204));
        jbtn_Nuevo.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jbtn_Nuevo.setText("Agregar nuevo");
        jbtn_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_NuevoActionPerformed(evt);
            }
        });

        horarios.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        horarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(horarios);

        jbtn_editar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jbtn_editar.setText("Actualizar");
        jbtn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_editarActionPerformed(evt);
            }
        });

        jbtn_Eliminar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jbtn_Eliminar.setText("Borrar");
        jbtn_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_EliminarActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButton4.setText("Volver");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        cancelar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        dia.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        dia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LUNES", "MARTES", "MIÉRCOLES", "JUEVES", "VIERNES", "SÁBADO", "DOMINGO" }));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setText("Dia");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(17, 17, 17)
                        .addComponent(horaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(17, 17, 17)
                        .addComponent(horaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtn_Nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jbtn_Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addComponent(jbtn_Nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Pantalla_gestion pg = new Pantalla_gestion();
        pg.show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jbtn_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_NuevoActionPerformed

        agregarHorario();

    }//GEN-LAST:event_jbtn_NuevoActionPerformed

    private void jbtn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_editarActionPerformed
        editarMateria();
    }//GEN-LAST:event_jbtn_editarActionPerformed

    private void jbtn_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_EliminarActionPerformed
        borrarMateria();
    }//GEN-LAST:event_jbtn_EliminarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        cerrarEdicion();
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Horario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Horario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> dia;
    private javax.swing.JComboBox<String> horaEntrada;
    private javax.swing.JComboBox<String> horaSalida;
    private javax.swing.JTable horarios;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtn_Eliminar;
    private javax.swing.JButton jbtn_Nuevo;
    private javax.swing.JButton jbtn_editar;
    // End of variables declaration//GEN-END:variables

    public void cargarTablaHorarios() {
        try {
            int i = 0;
            String[] horariosList = new String[4];
            modelo = new DefaultTableModel(null, titulos);
            String sql = "select * from horarios";
            Statement psd = cc.createStatement();
            ResultSet rs = psd.executeQuery(sql);

            while (rs.next()) { //Contamos cuantos datos hay
                i++;
            }
            horasEntrada = new String[i]; //Creamos los array con la cantidad de datos que haya
            horasSalida = new String[i];
            i = 0;
            rs = psd.executeQuery(sql); //ejecutamos de nuevo la consulta
            while (rs.next()) {
                horariosList[0] = rs.getString("id");
                horariosList[1] = rs.getString("horaEntrada");
                horasEntrada[i] = rs.getString("horaEntrada");
                horariosList[2] = rs.getString("horaSalida"); //Enviamos el ID y nos devuelve el nombre
                horasSalida[i] = rs.getString("horaSalida");
                horariosList[3] = rs.getDate("dia").toString(); //Lo mismo de arriba
                modelo.addRow(horariosList);
                i++;

            }
            horarios.setModel(modelo);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No hay horarios que mostrar");

        }

    }

    public void cargarTablaHorarios1() {
        modelo = new DefaultTableModel(null, titulos);
        JSONArray respuesta = cliente.get("http://localhost:8080/horario/obtenerHorarios");//Con getResponse() consumimos la api
        String[] datos = new String[4];

        for (int i = 0; i < respuesta.length(); i++) {
            JSONObject jsonObject = respuesta.getJSONObject(i); //Guardamos el dato [i] en un objeto
            datos[0] = String.valueOf(jsonObject.getInt("id")); //Guardamos el valor del jsonObject en un array
            datos[1] = String.valueOf(jsonObject.getInt("horaEntrada"));
            datos[2] = String.valueOf(String.valueOf(jsonObject.getInt("horaSalida")));
            datos[3] = String.valueOf(jsonObject.get("dia"));
            modelo.addRow(datos);
        }

        horarios.setModel(modelo);

        columnModel = horarios.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(1);//Ajustamos el tamaño de la columna 0

    }

    private void agregarHorario() {
//        
//        JSONObject postData = new JSONObject();
//        postData.put("nombre", Integer.valueOf(horaEntrada.getSelectedItem().toString()));
//        postData.put("horaEntrada", devolverIdDocente(String.valueOf(docente.getSelectedItem())));
//        postData.put("horaSalida", devolverIdCarrera(String.valueOf(carrera.getSelectedItem())));
//        postData.put("dia", nivel.getSelectedItem());
//
//        RequestBody requestbody = RequestBody.create(JSON, postData.toString());
//
//        boolean respuesta = cliente.post("http://localhost:8080/horario/guardar", requestbody);
//
//        if (respuesta) {
//            JOptionPane.showMessageDialog(null, "Se ha agregado la materia\n'" + nombreMateria.getText() + "'\ncorrectamente");
//            cargarTablaMaterias();
//            BorrarTxt();
//        } else {
//            JOptionPane.showMessageDialog(null, "Error al guardar la materia");
//        }
//        /////////////////
        try {
            String sql = "insert into horarios values(?,?,?,?)";
            PreparedStatement psd = cn.prepareStatement(sql);
            psd.setString(1, null);
            psd.setInt(2, Integer.valueOf(horaEntrada.getSelectedItem().toString()));
            psd.setInt(3, Integer.valueOf(horaSalida.getSelectedItem().toString()));
            psd.setString(4, dia.getSelectedItem().toString());
            int r = psd.executeUpdate();
            if (r > 0) {
                JOptionPane.showMessageDialog(null, "El horario se ha agregado correctamente");
                cargarTablaHorarios();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void editarMateria() {
        try {
            String sql = "Update horarios set horaEntrada='" + horaEntrada.getSelectedItem() + "', horaSalida='" + horaSalida.getSelectedItem() + "', dia='" + dia.getSelectedItem() + "' WHERE id='" + idActual + "'";
            PreparedStatement psd = cn.prepareStatement(sql);

            int n = psd.executeUpdate();

            if (n > 0) {
                JOptionPane.showMessageDialog(null, "Actualizo Correctamente");
                cargarTablaHorarios();
                cerrarEdicion();
            }
        } catch (SQLException ex) {
            System.out.println("ERROR: " + ex);
        }
    }

    private void cerrarEdicion() {

        jbtn_editar.setEnabled(false);
        jbtn_Eliminar.setEnabled(false);
        cancelar.setEnabled(false);
        jbtn_Nuevo.setEnabled(true);

    }

    private void borrarMateria() {
        if (JOptionPane.showConfirmDialog(new JInternalFrame(),
                "Estas seguro de borrar el registro",
                "Borrar registros", JOptionPane.WARNING_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try {
                String sql = "DELETE  FROM horarios WHERE id = '" + idActual + "'";

                PreparedStatement psd = cn.prepareStatement(sql);

                int n = psd.executeUpdate();

                if (n > 0) {
                    JOptionPane.showMessageDialog(null, "Se elimino correctamente");
                    cargarTablaHorarios();
                    cerrarEdicion();
                }

            } catch (SQLException ex) {
                System.out.println("ERROR" + ex);
            }
        }
    }

    private void seleccionarMateria() {
        horarios.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                activarBotonesEdicion();
                if (horarios.getSelectedRow() != -1) {
                    jbtn_Nuevo.setEnabled(false);
                    fila = horarios.getSelectedRow();
                    horaEntrada.setSelectedIndex(devolverIndex(horarios.getValueAt(fila, 1).toString()));
                    horaSalida.setSelectedIndex(devolverIndex(horarios.getValueAt(fila, 2).toString()));
                    dia.setSelectedIndex(devolverIndexDia(horarios.getValueAt(fila, 3).toString()));
                    idActual = Integer.valueOf(horarios.getValueAt(fila, 0).toString()); //Guardamos el ID para actualizar o eliminar posteriormente
                }
            }

        });
    }

    private int devolverIndex(String nombre) {
        for (int i = 0; i < 14; i++) {
            if (horaEntrada.getItemAt(i).equals(nombre)) {//Si el nombre es igual que el que se encuentra en el combo devuelve la posicion del numero en el combo
                return i;
            }
        }
        return 0;
    }

    private int devolverIndexDia(String dia) {

        switch (dia) {
            case "LUNES":
                return 0;
            case "MARTES":
                return 1;
            case "MIÉRCOLES":
                return 2;
            case "JUEVES":
                return 3;
            case "VIERNES":
                return 4;
            case "SÁBADO":
                return 5;
            case "DOMINGO":
                return 6;
            default:
                return 0;

        }
    }

    private void activarBotonesEdicion() {
        jbtn_editar.setEnabled(true);
        jbtn_Eliminar.setEnabled(true);
        cancelar.setEnabled(true);
    }

}
