/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fisei;

import bd.Cliente;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author User
 */
public class Materia extends javax.swing.JFrame {

    DefaultTableModel modelo = new DefaultTableModel();
    String[] idsDocentes, docentesList, carrerasList, idsCarreras;
    DefaultComboBoxModel pofesoresModel = new DefaultComboBoxModel();
    DefaultComboBoxModel carrerasModel = new DefaultComboBoxModel();
    String doc;
    Integer fila, idActual;
    TableColumnModel columnModel;

    Cliente cliente = new Cliente();
    MediaType JSON = MediaType.parse("application/json; charset=utf-8");

    String[] titulos = {"#", "Materia", "Docente", "Carrera", "Nivel"};

    public Materia() {
        
        initComponents();
        cargarProfesores();
        cargarCarreras();
        seleccionarMateria();
        cargarTablaMaterias();
        this.setLocationRelativeTo(null);
        cerrarEdicion();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombreMateria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        docente = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        carrera = new javax.swing.JComboBox<>();
        jbtn_Nuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        materias = new javax.swing.JTable();
        jbtn_editar = new javax.swing.JButton();
        jbtn_Eliminar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        nivel = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nombreMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreMateriaActionPerformed(evt);
            }
        });
        getContentPane().add(nombreMateria, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 201, -1));

        jLabel1.setText("Nombre de la materia");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabel2.setText("Docente");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 98, -1, -1));

        getContentPane().add(docente, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 123, 201, -1));

        jLabel3.setText("Carrera");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 161, -1, -1));

        getContentPane().add(carrera, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 186, 201, -1));

        jbtn_Nuevo.setText("Agregar nuevo");
        jbtn_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_NuevoActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_Nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 283, 220, 30));

        materias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(materias);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 11, 870, -1));

        jbtn_editar.setText("Actualizar");
        jbtn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_editarActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_editar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 105, 30));

        jbtn_Eliminar.setText("Borrar");
        jbtn_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_EliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jbtn_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, 105, 30));

        jButton4.setText("Volver");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 420, -1, -1));

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 370, -1, -1));

        nivel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        getContentPane().add(nivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 50, -1));

        jLabel4.setText("Nivel");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreMateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreMateriaActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Pantalla_gestion pg = new Pantalla_gestion();
        pg.show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jbtn_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_NuevoActionPerformed
        if (nombreMateria.equals("") || nombreMateria.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese un nombre para la materia");
        } else {
            agregarMateria();
        }
    }//GEN-LAST:event_jbtn_NuevoActionPerformed

    private void jbtn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_editarActionPerformed
        editarMateria();
    }//GEN-LAST:event_jbtn_editarActionPerformed

    private void jbtn_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_EliminarActionPerformed
        borrarMateria();
    }//GEN-LAST:event_jbtn_EliminarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        cerrarEdicion();
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Materia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Materia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Materia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Materia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Materia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> carrera;
    private javax.swing.JComboBox<String> docente;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtn_Eliminar;
    private javax.swing.JButton jbtn_Nuevo;
    private javax.swing.JButton jbtn_editar;
    private javax.swing.JTable materias;
    private javax.swing.JComboBox<String> nivel;
    private javax.swing.JTextField nombreMateria;
    // End of variables declaration//GEN-END:variables

    public void cargarTablaMaterias() {
        modelo = new DefaultTableModel(null, titulos);
        JSONArray respuesta = cliente.get("http://localhost:8080/materia/obtenerMaterias");//Con getResponse() consumimos la api
        String[] datos = new String[5];

        for (int i = 0; i < respuesta.length(); i++) {
            JSONObject jsonObject = respuesta.getJSONObject(i); //Guardamos el dato [i] en un objeto
            datos[0] = String.valueOf(jsonObject.getInt("id")); //Guardamos el valor del jsonObject en un array
            datos[1] = jsonObject.getString("nombre");
            datos[2] = devolverDocente(String.valueOf(jsonObject.getInt("docenteID")));
            datos[3] = devolverCarrera(String.valueOf(jsonObject.getInt("carreraID")));
            datos[4] = String.valueOf(jsonObject.getInt("nivel"));
            modelo.addRow(datos);
        }

        materias.setModel(modelo);
    }

    private void cargarProfesores() {
        //http://localhost:8080/materia/obtenerMaterias

        JSONArray respuesta = cliente.get("http://localhost:8080/docente/obtenerDocentes");//Con getResponse() consumimos la api

        docentesList = new String[respuesta.length()];
        idsDocentes = new String[respuesta.length()];

        for (int i = 0; i < respuesta.length(); i++) {
            JSONObject jsonObject = respuesta.getJSONObject(i);
            idsDocentes[i] = String.valueOf(jsonObject.getInt("id"));
            docentesList[i] = String.valueOf(jsonObject.getString("nombre"));
        }
        pofesoresModel = new DefaultComboBoxModel(docentesList);
        docente.setModel(pofesoresModel);

    }

    private void cargarCarreras() {

        JSONArray respuesta = cliente.get("http://localhost:8080/carrera/obtenerCarreras");//Con getResponse() consumimos la api

        carrerasList = new String[respuesta.length()];
        idsCarreras = new String[respuesta.length()];

        for (int i = 0; i < respuesta.length(); i++) {
            JSONObject jsonObject = respuesta.getJSONObject(i);
            idsCarreras[i] = String.valueOf(jsonObject.getInt("id"));
            carrerasList[i] = String.valueOf(jsonObject.getString("nombre"));
        }
        carrerasModel = new DefaultComboBoxModel(carrerasList);
        carrera.setModel(carrerasModel);

    }

    private void agregarMateria() {

        JSONObject postData = new JSONObject();
        postData.put("nombre", nombreMateria.getText());
        postData.put("docenteID", devolverIdDocente(String.valueOf(docente.getSelectedItem())));
        postData.put("carreraID", devolverIdCarrera(String.valueOf(carrera.getSelectedItem())));
        postData.put("nivel", nivel.getSelectedItem());

        RequestBody requestbody = RequestBody.create(JSON, postData.toString());

        boolean respuesta = cliente.post("http://localhost:8080/materia/guardar", requestbody);

        if (respuesta) {
            JOptionPane.showMessageDialog(null, "Se ha agregado la materia\n'" + nombreMateria.getText() + "'\ncorrectamente");
            cargarTablaMaterias();
            BorrarTxt();
        } else {
            JOptionPane.showMessageDialog(null, "Error al guardar la materia");
        }

    }

    private void editarMateria() {
        if (nombreMateria.getText().isEmpty() || nombreMateria.equals("")) {

            JOptionPane.showMessageDialog(this, "Debe un nombre de materia");
            nombreMateria.requestFocus();

        } else {
            JSONObject putData = new JSONObject();
            putData.put("id", idActual);
            putData.put("nombre", nombreMateria.getText());
            putData.put("docenteID", devolverIdDocente(String.valueOf(docente.getSelectedItem())));
            putData.put("carreraID", devolverIdCarrera(String.valueOf(carrera.getSelectedItem())));
            putData.put("nivel", Integer.valueOf(nivel.getSelectedItem().toString()));

            RequestBody requestbody = RequestBody.create(JSON, putData.toString());

            boolean respuesta = cliente.put("http://localhost:8080/materia/actualizarMateria", requestbody);

            if (respuesta) {
                JOptionPane.showMessageDialog(null, "Actualizo Correctamente");
                cargarTablaMaterias();
                BorrarTxt();
                cerrarEdicion();
            } else {
                JOptionPane.showMessageDialog(null, "Error al editar la materia");
            }
        }
    }

    private void borrarMateria() {
        if (JOptionPane.showConfirmDialog(new JInternalFrame(),
                "Estas seguro de borrar el registro",
                "Borrar registros", JOptionPane.WARNING_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            boolean respuesta = cliente.delete("http://localhost:8080/materia/" + idActual);

            if (respuesta) {
                JOptionPane.showMessageDialog(null, "Se elimino correctamente");
                cargarTablaMaterias();
                BorrarTxt();
                cerrarEdicion();
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar la materia");
            }
        }
    }

    private void BorrarTxt() {
        nombreMateria.setText("");
    }

    private void seleccionarMateria() {
        materias.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                activarBotonesEdicion();
                if (materias.getSelectedRow() != -1) {
                    jbtn_Nuevo.setEnabled(false);
                    fila = materias.getSelectedRow();
                    nombreMateria.setText(materias.getValueAt(fila, 1).toString());
                    docente.setSelectedIndex(devolverIndexDocente(materias.getValueAt(fila, 2).toString()));
                    carrera.setSelectedIndex(devolverIndexCarrera(materias.getValueAt(fila, 3).toString()));
                    nivel.setSelectedIndex(Integer.valueOf(materias.getValueAt(fila, 4).toString())-1);
                    idActual = Integer.valueOf(materias.getValueAt(fila, 0).toString()); //Guardamos el ID para actualizar o eliminar posteriormente
                    
                }
            }

        });
    }

    private String devolverDocente(String id) {

        for (int i = 0; i < docentesList.length; i++) {
            if (idsDocentes[i].equals(id)) {
                return docentesList[i];
            }
        }
        return "";
    }

    private String devolverCarrera(String id) {

        for (int i = 0; i < carrerasList.length; i++) {
            if (idsCarreras[i].equals(id)) {
                return carrerasList[i];
            }
        }
        return "";
    }

    private int devolverIndexDocente(String nombre) {
        for (int i = 0; i < docentesList.length; i++) {
            if (docentesList[i].equals(nombre)) {
                return i;
            }
        }
        return 0;
    }

    private int devolverIndexCarrera(String nombre) {
        for (int i = 0; i < carrerasList.length; i++) {
            if (carrerasList[i].equals(nombre)) {
                return i;
            }
        }
        return 0;
    }

    private void activarBotonesEdicion() {
        jbtn_editar.setEnabled(true);
        jbtn_Eliminar.setEnabled(true);
        cancelar.setEnabled(true);
    }

    private void cerrarEdicion() {
        jbtn_editar.setEnabled(false);
        jbtn_Eliminar.setEnabled(false);
        cancelar.setEnabled(false);
        nombreMateria.setText("");
        jbtn_Nuevo.setEnabled(true);
    }

    private int devolverIdDocente(String nombre) {
        for (int i = 0; i < docentesList.length; i++) {
            if (docentesList[i].equals(nombre)) {
                return Integer.valueOf(idsDocentes[i]);
            }
        }
        return 0;
    }

    private int devolverIdCarrera(String nombre) {
        for (int i = 0; i < carrerasList.length; i++) {
            if (carrerasList[i].equals(nombre)) {
                return Integer.valueOf(idsCarreras[i]);
            }
        }
        return 0;
    }
}
